const axios = require('axios'); // 使用 axios 库进行 HTTP 请求
const YAML = require('yaml'); // 用于生成 YAML 格式文件
const fs = require('fs'); // 用于文件操作

async function fetchProxiesFromSubscription(url) {
  try {
    const response = await axios.get(url);
    const data = response.data; // 假设返回的数据是标准的 Clash 配置
    return data.proxies;
  } catch (error) {
    console.error(`Failed to fetch proxies from ${url}:`, error);
    return [];
  }
}

async function generateConfig() {
  const subscriptionUrls = [
    'https://api-huacloud.dev/sub?target=clash&insert=true&emoji=true&udp=true&clash.doh=true&new_name=true&filename=Flower_Trojan&url=https%3A%2F%2Fapi.xmancdn.com%2Fosubscribe.php%3Fsid%3D88236%26token%3D0KG2aNkTPx3L',
  ];

  let proxies = [];
  for (const url of subscriptionUrls) {
    const fetchedProxies = await fetchProxiesFromSubscription(url);
    proxies = proxies.concat(fetchedProxies);
  }

  if (proxies.length === 0) {
    console.error('No proxies found.');
    return;
  }

  const proxyNames = proxies.map(proxy => proxy.name);

  const groups = [
    {
      "name": "🚀不时之需",
      "type": "select",
      "proxies": [
        "DIRECT",
        "✨代理模式"
      ]
    },
    {
      "name": "🐟漏网之鱼",
      "type": "select",
      "proxies": [
        "DIRECT",
        "✨代理模式"
      ]
    },
    {
      "name": "✨代理模式",
      "type": "select",
      "proxies": [
        "🤖自动选择",
        "🎯手动选择"
      ]
    },
    {
      "name": "🤖自动选择",
      "type": "url-test",
      "url": "http://www.gstatic.com/generate_204",
      "interval": 300,
      "tolerance": 50,
      "proxies": proxyNames
    },
    {
      "name": "🎯手动选择",
      "type": "select",
      "proxies": proxyNames
    },
    {
      "name": "⛔广告拦截",
      "type": "select",
      "proxies": [
        "REJECT",
        "DIRECT",
        "✨代理模式"
      ]
    }
  ];

  const rules = [
    "RULE-SET,reject,⛔广告拦截",
    "RULE-SET,direct,DIRECT",
    "RULE-SET,cncidr,DIRECT",
    "RULE-SET,private,DIRECT",
    "RULE-SET,lancidr,DIRECT",
    "GEOIP,LAN,DIRECT",
    "GEOIP,CN,DIRECT",
    "RULE-SET,selfdomain,🚀不时之需",
    "RULE-SET,tld-not-cn,🚀不时之需",
    "RULE-SET,selfapp,🚀不时之需",
    "RULE-SET,applications,🚀不时之需",
    "RULE-SET,google,🚀不时之需",
    "RULE-SET,icloud,🚀不时之需",
    "RULE-SET,apple,🚀不时之需",
    "DOMAIN-SUFFIX,hockeyapp.net,✨代理模式",
    "DOMAIN-SUFFIX,firebaseio.com,✨代理模式",
    "DOMAIN,usage.readdle.com,✨代理模式",
    "DOMAIN,api.amplitude.com,✨代理模式",
    "DOMAIN,app.smartmailcloud.com,✨代理模式",
    "RULE-SET,gfw,✨代理模式",
    "RULE-SET,greatfire,✨代理模式",
    "RULE-SET,telegramcidr,✨代理模式",
    "RULE-SET,proxy,✨代理模式",
    "MATCH,🐟漏网之鱼"
  ];

  const ruleProviders = {
    "reject": {
      "type": "http",
      "behavior": "domain",
      "url": "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt",
      "path": "./ruleset/reject.yaml",
      "interval": 86400
    },
    "icloud": {
      "type": "http",
      "behavior": "domain",
      "url": "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/icloud.txt",
      "path": "./ruleset/icloud.yaml",
      "interval": 86400
    },
    // 省略其他规则提供者配置
  };

  const config = {
    'proxy-groups': groups,
    'rules': rules,
    'proxies': proxies,
    'rule-providers': ruleProviders
  };

  fs.writeFileSync('clash-config.yaml', YAML.stringify(config), 'utf8');
  console.log('Configuration file generated: clash-config.yaml');
}

// 生成配置文件
generateConfig();
